{"version":3,"sources":["images/balloon_explode.png","images/balloon_0.png","images/balloon_1.png","images/balloon_2.png","images/balloon_3.png","images/balloon_4.png","images/balloon_5.png","images/balloon_6.png","images/balloon_7.png","Config.js","UiState.js","StartScreen.js","Balloon.js","GameScreen.js","EndScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Config","sizeIncrease","maxPumps","earningScale","balloons","require","nextButtonActive","state","runningAnimation","pumps","currentScreen","currentRound","start","rounds","length","end","getUiState","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","StartScreen","props","classes","Fragment","Grid","container","direction","alignItems","justify","className","item","xs","Typography","gutterBottom","variant","Button","fullWidth","color","onClick","Balloon","balloon","exploded","src","Exploding","alt","style","TransitionGroup","CSSTransition","key","in","timeout","classNames","exit","GameScreen","winnings","earned","takeWinnings","pump","TextField","id","label","margin","disabled","value","nextRound","EndScreen","sleep","milliseconds","Promise","resolve","setTimeout","defaultState","_","shuffle","buttonText","App","time","this","setState","then","runAnimation","console","log","pumpButtonActive","reset","component","root","CssBaseline","React","Component","withStyles","form","width","submit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,6C,gFCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,2MCyB5BC,EAzBA,CACbC,aAAc,EACdC,SAAU,CAAC,EAAG,EAAG,EAAG,GACpBC,aAAc,CACZ,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEFC,SAAU,CACRC,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,KACRA,EAAQ,OCrBNC,EAAmB,SAAAC,GAAK,OAAKA,EAAMC,kBAAoBD,EAAME,MAAQ,GAYrEC,EAAgB,SAAAH,GACpB,OARY,SAAAA,GAAK,OAA2B,IAAvBA,EAAMI,aAQvBC,CAAML,GACD,QAPC,SAAAA,GAAK,OAAIA,EAAMI,aAAeJ,EAAMM,OAAOC,OAUjDC,CAAIR,GACC,MAGF,QAEHS,EAAa,SAAAT,GACjB,MAAO,CACLG,cAAeA,EAAcH,GAC7BD,iBAAkBA,EAAiBC,K,2BCpBjCU,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,YAAaF,EAAMG,QAAQ,IAE7BC,YAAa,CACXC,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,EAAG,EAAG,IAE/BO,YAAa,CACXC,UAAWX,EAAMG,QAAQ,IAE3BS,SAAU,CACRC,WAAYb,EAAMG,QAAQ,GAC1BW,cAAed,EAAMG,QAAQ,IAE/BY,KAAM,CACJC,OAAQ,OACRC,QAAS,OACTC,cAAe,UAEjBC,UAAW,CACTN,WAAY,UAEdO,YAAa,CACXC,SAAU,GAEZC,OAAQ,CACNjB,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,OAIZ,SAASoB,EAAYC,GAClC,IAAMC,EAAU3B,IAEhB,OACE,kBAAC,IAAM4B,SAAP,KACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,SACRC,UAAWP,EAAQG,WAEnB,kBAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,MAAjC,YAGA,kBAACC,EAAA,EAAD,CACED,QAAQ,YACRE,WAAS,EACTC,MAAM,UACNC,QAASjB,EAAMiB,SAJjB,Y,+CCVKC,EApCC,SAAAlB,GACd,IAAMmB,EAAUnB,EAAMoB,SACpB,yBACEC,IAAKC,IACLC,IAAI,OACJC,MAAO,CACLhC,OAAO,GAAD,OAAK,GAAKnC,EAAOC,aAAe0C,EAAMlC,MAAtC,WAIV,yBACEuD,IAAKhE,EAAOI,SAASuC,EAAMlC,OAC3ByD,IAAI,OACJC,MAAO,CACLhC,OAAO,GAAD,OAAK,GAAKnC,EAAOC,aAAe0C,EAAMlC,MAAtC,SAERmD,QAASjB,EAAMiB,UAInB,OACE,kBAACd,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,QAAQ,UAC7D,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,IAAK3B,EAAMlC,MACX8D,IAAK5B,EAAMoB,SACXS,QAAS,IACTC,WAAW,UACXC,KAAM/B,EAAMoB,UAEXD,M,SC/BL7C,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,YAAaF,EAAMG,QAAQ,IAE7BC,YAAa,CACXC,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,EAAG,EAAG,IAE/BO,YAAa,CACXC,UAAWX,EAAMG,QAAQ,IAE3BS,SAAU,CACRC,WAAYb,EAAMG,QAAQ,GAC1BW,cAAed,EAAMG,QAAQ,IAE/BY,KAAM,CACJC,OAAQ,OACRC,QAAS,OACTC,cAAe,UAEjBC,UAAW,CACTN,WAAY,UAEdO,YAAa,CACXC,SAAU,GAEZC,OAAQ,CACNjB,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,OAIZ,SAASqD,EAAWhC,GACjC,IAAMC,EAAU3B,IAGd2D,EAOEjC,EAPFiC,SACAC,EAMElC,EANFkC,OACAvE,EAKEqC,EALFrC,iBACAyD,EAIEpB,EAJFoB,SACAe,EAGEnC,EAHFmC,aACArE,EAEEkC,EAFFlC,MACAsE,EACEpC,EADFoC,KAGF,OACE,kBAAC,IAAMlC,SAAP,KACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,SACRC,UAAWP,EAAQG,WAEnB,kBAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IACb,kBAAC2B,EAAA,EAAD,CACEC,GAAG,gBACHC,MAAM,WACNC,OAAO,SACP3B,QAAQ,WACR4B,UAAU,EACV1B,WAAS,EACT2B,MAAOT,IAET,kBAACI,EAAA,EAAD,CACEC,GAAG,gBACHC,MAAM,SACNC,OAAO,SACP3B,QAAQ,WACR4B,UAAU,EACV1B,WAAS,EACT2B,MAAOR,IAET,kBAACpB,EAAA,EAAD,CACED,QAAQ,YACRE,WAAS,EACTC,MAAM,UACNyB,UAAW9E,EACXsD,QAASkB,GALX,iBASA,kBAAC,EAAD,CACElB,QAASmB,EACTtE,MAAOA,EACPsD,SAAUA,EACVuB,UAAW3C,EAAM2C,eCvF7B,IAAMrE,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,YAAaF,EAAMG,QAAQ,IAE7BC,YAAa,CACXC,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,EAAG,EAAG,IAE/BO,YAAa,CACXC,UAAWX,EAAMG,QAAQ,IAE3BS,SAAU,CACRC,WAAYb,EAAMG,QAAQ,GAC1BW,cAAed,EAAMG,QAAQ,IAE/BY,KAAM,CACJC,OAAQ,OACRC,QAAS,OACTC,cAAe,UAEjBC,UAAW,CACTN,WAAY,UAEdO,YAAa,CACXC,SAAU,GAEZC,OAAQ,CACNjB,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,QAAST,EAAMG,QAAQ,OAIZ,SAASiE,EAAU5C,GAChC,IAAMC,EAAU3B,IAEhB,OACE,kBAAC,IAAM4B,SAAP,KACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,SACRC,UAAWP,EAAQG,WAEnB,kBAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,MAAjC,sCACsCb,EAAMiC,SAD5C,YAGA,kBAACnB,EAAA,EAAD,CACED,QAAQ,YACRE,WAAS,EACTC,MAAM,UACNC,QAASjB,EAAMiB,SAJjB,e,ykBC1CV,IAmBM4B,EAAQ,SAAAC,GACZ,OAAO,IAAIC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAG9CI,EAAe,WACnB,MAAO,CACLpF,MAAO,EACPoE,OAAQ,EACRhE,OAAQiF,IAAEC,QAAQ/F,EAAOE,UACzBS,aAAc,EACdiE,SAAU,EACVpE,kBAAkB,EAClBuD,UAAU,EACViC,WAAY,kBAIVC,E,YACJ,WAAYtD,GAAQ,IAAD,8BACjB,4CAAMA,KACDpC,MAAQsF,IAFI,E,4EAKO,IAAD,OAAZK,EAAY,uDAAL,IAClBC,KAAKC,SAAS,CAAE5F,kBAAkB,IAClCgF,EAAMU,GAAMG,KAAK,kBAAM,EAAKD,SAAS,CAAE5F,kBAAkB,Q,6BAGnD,ILlDUD,EKkDX,SACuC4F,KAAK5F,MAAzCE,EADH,EACGA,MAAOoE,EADV,EACUA,OADV,EACkBrE,mBAKvB2F,KAAKG,gBLxDW/F,EKyDA4F,KAAK5F,OLxDjBE,QAAUF,EAAMM,OAAON,EAAMI,aAAe,GAAK,GKyDnDwF,KAAKC,SAAS,CAAErC,UAAU,IAE1ByB,EAAM,IAAIa,KAAK,kBAAM,EAAKf,eAE1Ba,KAAKC,SAAS,CACZ3F,MAAOA,EAAQ,EACfoE,OAAQA,EAAS7E,EAAOG,aAAaM,Q,8BAMzC0F,KAAKC,SAASP,O,qCAGA,IAAD,EACsCM,KAAK5F,MAAhDsE,EADK,EACLA,OAAQlE,EADH,EACGA,aAAciE,EADjB,EACiBA,SAAU/D,EAD3B,EAC2BA,OACxCsF,KAAKC,SAAL,KACKP,IADL,CAEEhF,OAAQA,EACRF,aAAcA,EAAe,EAC7BiE,SAAUA,EAAWC,O,kCAIZ,IAAD,EACiCsB,KAAK5F,MAAxCI,EADE,EACFA,aAAcE,EADZ,EACYA,OAAQ+D,EADpB,EACoBA,SAC9BuB,KAAKC,SAAL,KACKP,IADL,CAEEhF,OAAQA,EACRF,aAAcA,EAAe,EAC7BiE,SAAUA,O,sCAIG,IAAD,SACgCuB,KAAK5F,MAA3CwD,EADM,EACNA,SAAUtD,EADJ,EACIA,MAAOmE,EADX,EACWA,SAAUC,EADrB,EACqBA,OAEnC0B,QAAQC,IAAIL,KAAK5F,OAHH,MAKgDS,EAC5DmF,KAAK5F,OADCG,EALM,EAKNA,cAAeJ,EALT,EAKSA,iBAAkBmG,EAL3B,EAK2BA,iBAMzC,OAFAF,QAAQC,IAAIxF,EAAWmF,KAAK5F,QAEpBG,GACN,IAAK,QACH,OAAO,kBAACgC,EAAD,CAAakB,QAAS,kBAAM,EAAK0B,eAC1C,IAAK,MACH,OAAO,kBAACC,EAAD,CAAWX,SAAUA,EAAUhB,QAAS,kBAAM,EAAK8C,WAC5D,QACE,OACE,kBAAC/B,EAAD,CACElE,MAAOA,EACPmE,SAAUA,EACVC,OAAQA,EACRC,aAAc,kBAAM,EAAKA,gBACzBxE,iBAAkBA,EAClByD,SAAUA,EACV0C,iBAAkBA,EAClB1B,KAAM,kBAAM,EAAKA,a,+BAMjB,IACAnC,EAAYuD,KAAKxD,MAAjBC,QAER,OACE,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAAC4D,UAAU,OAAOxD,UAAWP,EAAQgE,MAClD,kBAACC,EAAA,EAAD,MACCV,KAAKzF,qB,GA5FIoG,IAAMC,WAiGTC,cArIA,SAAA7F,GAAK,MAAK,CACvByF,KAAM,CACJzE,OAAQ,SAEVR,MAAO,CACLwD,OAAQhE,EAAMG,QAAQ,EAAG,GACzBc,QAAS,OACTC,cAAe,SACfY,WAAY,UAEdgE,KAAM,CACJC,MAAO,OACPpF,UAAWX,EAAMG,QAAQ,IAE3B6F,OAAQ,CACNhC,OAAQhE,EAAMG,QAAQ,EAAG,EAAG,MAsHjB0F,CAAmBf,GCrIdmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.8fbf0ba6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/balloon_explode.e09707a9.png\";","module.exports = __webpack_public_path__ + \"static/media/balloon_0.daf9b4a4.png\";","module.exports = __webpack_public_path__ + \"static/media/balloon_1.014ecc67.png\";","module.exports = __webpack_public_path__ + \"static/media/balloon_2.a3da9636.png\";","module.exports = __webpack_public_path__ + \"static/media/balloon_3.9f363223.png\";","module.exports = __webpack_public_path__ + \"static/media/balloon_4.475cf15e.png\";","module.exports = __webpack_public_path__ + \"static/media/balloon_5.d3cae4ba.png\";","module.exports = __webpack_public_path__ + \"static/media/balloon_6.80890259.png\";","module.exports = __webpack_public_path__ + \"static/media/balloon_7.4d7bd73b.png\";","const Config = {\n  sizeIncrease: 2,\n  maxPumps: [2, 3, 5, 6],\n  earningScale: [\n    1, // '1' = 1\n    1, // '2' = 2\n    2, // '3' = 4\n    3, // '4' = 7\n    4, // '5' = 11\n    6, // '6' = 17\n    8, // '7' = 25\n    10 // '8' = 35\n  ],\n  balloons: [\n    require('./images/balloon_0.png'),\n    require('./images/balloon_1.png'),\n    require('./images/balloon_2.png'),\n    require('./images/balloon_3.png'),\n    require('./images/balloon_4.png'),\n    require('./images/balloon_5.png'),\n    require('./images/balloon_6.png'),\n    require('./images/balloon_7.png')\n  ]\n}\n\nexport default Config\n","const nextButtonActive = state => !state.runningAnimation && state.pumps > 0\n\nconst roundIsRunning = state =>\n  state.pumps <= state.rounds[state.currentRound - 1]\n\nconst start = state => state.currentRound === 0\n\nconst end = state => state.currentRound > state.rounds.length\n\nconst isLastRound = state =>\n  state.pumps === state.rounds[state.currentRound - 1] - 1\n\nconst currentScreen = state => {\n  if (start(state)) {\n    return 'START'\n  }\n\n  if (end(state)) {\n    return 'END'\n  }\n\n  return 'GAME'\n}\nconst getUiState = state => {\n  return {\n    currentScreen: currentScreen(state),\n    nextButtonActive: nextButtonActive(state)\n  }\n}\n\nexport { getUiState, roundIsRunning, isLastRound }\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  cardMedia: {\n    paddingTop: '56.25%' // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}))\n\nexport default function StartScreen(props) {\n  const classes = useStyles()\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n        className={classes.container}\n      >\n        <Grid item xs={12}>\n          <Typography gutterBottom variant=\"h1\">\n            Welcome.\n          </Typography>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            color=\"primary\"\n            onClick={props.onClick}\n          >\n            Start\n          </Button>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import React from 'react'\n\nimport './Balloon.css'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport Config from './Config'\nimport Exploding from './images/balloon_explode.png'\nimport Grid from '@material-ui/core/Grid'\n\nconst Balloon = props => {\n  const balloon = props.exploded ? (\n    <img\n      src={Exploding}\n      alt=\"logo\"\n      style={{\n        height: `${40 + Config.sizeIncrease * props.pumps}vmin`\n      }}\n    />\n  ) : (\n    <img\n      src={Config.balloons[props.pumps]}\n      alt=\"logo\"\n      style={{\n        height: `${40 + Config.sizeIncrease * props.pumps}vmin`\n      }}\n      onClick={props.onClick}\n    />\n  )\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\n      <TransitionGroup>\n        <CSSTransition\n          key={props.pumps}\n          in={!props.exploded}\n          timeout={500}\n          classNames=\"balloon\"\n          exit={props.exploded}\n        >\n          {balloon}\n        </CSSTransition>\n      </TransitionGroup>\n    </Grid>\n  )\n}\nexport default Balloon\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Balloon from './Balloon'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  cardMedia: {\n    paddingTop: '56.25%' // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}))\n\nexport default function GameScreen(props) {\n  const classes = useStyles()\n\n  const {\n    winnings,\n    earned,\n    nextButtonActive,\n    exploded,\n    takeWinnings,\n    pumps,\n    pump\n  } = props\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n        className={classes.container}\n      >\n        <Grid item xs={12}>\n          <TextField\n            id=\"outlined-name\"\n            label=\"Winnings\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            disabled={true}\n            fullWidth\n            value={winnings}\n          />\n          <TextField\n            id=\"outlined-name\"\n            label=\"Earned\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            disabled={true}\n            fullWidth\n            value={earned}\n          />\n          <Button\n            variant=\"contained\"\n            fullWidth\n            color=\"primary\"\n            disabled={!nextButtonActive}\n            onClick={takeWinnings}\n          >\n            Take Winnings\n          </Button>\n          <Balloon\n            onClick={pump}\n            pumps={pumps}\n            exploded={exploded}\n            nextRound={props.nextRound}\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  cardMedia: {\n    paddingTop: '56.25%' // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}))\n\nexport default function EndScreen(props) {\n  const classes = useStyles()\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n        className={classes.container}\n      >\n        <Grid item xs={12}>\n          <Typography gutterBottom variant=\"h1\">\n            Congratulations you have collected {props.winnings} points.\n          </Typography>\n          <Button\n            variant=\"contained\"\n            fullWidth\n            color=\"primary\"\n            onClick={props.onClick}\n          >\n            Re-Start\n          </Button>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport 'typeface-roboto'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Grid from '@material-ui/core/Grid'\nimport { withStyles } from '@material-ui/core/styles'\nimport Config from './Config'\nimport { getUiState, isLastRound } from './UiState'\nimport StartScreen from './StartScreen'\nimport GameScreen from './GameScreen'\nimport EndScreen from './EndScreen'\nimport _ from 'lodash'\n\nconst styles = theme => ({\n  root: {\n    height: '100vh'\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n})\n\nconst sleep = milliseconds => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nconst defaultState = () => {\n  return {\n    pumps: 0,\n    earned: 0,\n    rounds: _.shuffle(Config.maxPumps),\n    currentRound: 0,\n    winnings: 0,\n    runningAnimation: false,\n    exploded: false,\n    buttonText: 'Take winnings'\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = defaultState()\n  }\n\n  runAnimation(time = 500) {\n    this.setState({ runningAnimation: true })\n    sleep(time).then(() => this.setState({ runningAnimation: false }))\n  }\n\n  pump() {\n    const { pumps, earned, runningAnimation } = this.state\n    if (runningAnimation) {\n      return\n    }\n\n    this.runAnimation()\n    if (isLastRound(this.state)) {\n      this.setState({ exploded: true })\n\n      sleep(50).then(() => this.nextRound())\n    } else {\n      this.setState({\n        pumps: pumps + 1,\n        earned: earned + Config.earningScale[pumps]\n      })\n    }\n  }\n\n  reset() {\n    this.setState(defaultState())\n  }\n\n  takeWinnings() {\n    const { earned, currentRound, winnings, rounds } = this.state\n    this.setState({\n      ...defaultState(),\n      rounds: rounds,\n      currentRound: currentRound + 1,\n      winnings: winnings + earned\n    })\n  }\n\n  nextRound() {\n    const { currentRound, rounds, winnings } = this.state\n    this.setState({\n      ...defaultState(),\n      rounds: rounds,\n      currentRound: currentRound + 1,\n      winnings: winnings\n    })\n  }\n\n  currentScreen() {\n    const { exploded, pumps, winnings, earned } = this.state\n\n    console.log(this.state)\n\n    const { currentScreen, nextButtonActive, pumpButtonActive } = getUiState(\n      this.state\n    )\n\n    console.log(getUiState(this.state))\n\n    switch (currentScreen) {\n      case 'START':\n        return <StartScreen onClick={() => this.nextRound()} />\n      case 'END':\n        return <EndScreen winnings={winnings} onClick={() => this.reset()} />\n      default:\n        return (\n          <GameScreen\n            pumps={pumps}\n            winnings={winnings}\n            earned={earned}\n            takeWinnings={() => this.takeWinnings()}\n            nextButtonActive={nextButtonActive}\n            exploded={exploded}\n            pumpButtonActive={pumpButtonActive}\n            pump={() => this.pump()}\n          />\n        )\n    }\n  }\n\n  render() {\n    const { classes } = this.props\n\n    return (\n      <Grid container component=\"main\" className={classes.root}>\n        <CssBaseline />\n        {this.currentScreen()}\n      </Grid>\n    )\n  }\n}\nexport default withStyles(styles)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}